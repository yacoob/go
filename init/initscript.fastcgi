#! /bin/sh
### BEGIN INIT INFO
# Provides:          go-fastcgi
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Initscript for go-fastcgi.
### END INIT INFO

# Author: Jakub Turski <yacoob@gmail.com>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Go - URL redirector and trampoline"
NAME=go-fastcgi
BASENAME=${NAME%.*}
LAUNCHER="/usr/bin/spawn-fcgi"
SCRIPT="/usr/lib/python2.5/site-packages/go/go.py"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$BASENAME

# Exit if the package is not installed
[ -x "$LAUNCHER" ] || exit 0

# Read configuration variable file
[ -r /etc/default/$BASENAME ] && . /etc/default/$BASENAME || exit 0
LAUNCHER_ARGS="-d / -a $GO_HOST -p $GO_PORT -u $GO_USER -P $PIDFILE -- /usr/bin/python $SCRIPT -d $GO_DB -a $GO_DATA"

# Source function library
. /lib/lsb/init-functions

do_start() {
    $LAUNCHER $LAUNCHER_ARGS >/dev/null 2>&1 || return 2
}

do_stop() {
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --pidfile $PIDFILE
    [ "$?" = 2 ] && return 2
    rm -f $PIDFILE
    return "$RETVAL"
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
